"""TRG

Reference:

temp: temperature
T: UniTensor T

Ref:
* https://tensornetwork.org/trg/
"""
import cytnx
import numpy as np

# zero external field
print("#"*80)
print("(TRG) 2D Ising model, zero external field")
print("#"*80)
temp = 1.
print("(TRG) Constructing W")
W = np.array([[+np.exp(+1/temp), +np.exp(-1/temp)],
              [+np.exp(-1/temp), +np.exp(+1/temp)]])

print("(TRG) Constructing M")
M = np.array([[+np.sqrt(np.cosh(+1/temp)), +np.sqrt(np.sinh(+1/temp))],
              [+np.sqrt(np.cosh(+1/temp)), -np.sqrt(np.sinh(+1/temp))]])

print("(TRG) Checking if W-M@Md=0")
print(np.linalg.norm(W-M@M.transpose()))

# tensor Name : T
# tensor Rank : 4
# block_form  : False
# is_diag     : False
# on device   : cytnx device: CPU
#              ---------
#             /         \
#    y_i ____| 2     2 |____ x_o
#             |         
#    x_i ____| 2     2 |____ y_o
#             \         /
#              ---------print("(TRG) Constructing T")
bd = cytnx.Bond(2)
T = cytnx.UniTensor([bd,bd,bd,bd], rowrank=2).set_name("T").relabel(["y_i","x_i","x_o","y_o"])
T.print_diagram()
for y_i in range(2):
    for x_i in range(2):
        for x_o in range(2):
            for y_o in range(2):
                T[y_i,x_i,x_o,y_o] = M[0,y_i]*M[0,x_i]*M[0,x_o]*M[0,y_o] + M[1,y_i]*M[1,x_i]*M[1,x_o]*M[1,y_o]
print(T)
# [[[[4.76220e+00 0.00000e+00 ]
#    [0.00000e+00 3.62686e+00 ]]
#   [[0.00000e+00 3.62686e+00 ]
#    [3.62686e+00 0.00000e+00 ]]]
#  [[[0.00000e+00 3.62686e+00 ]
#    [3.62686e+00 0.00000e+00 ]]
#   [[3.62686e+00 0.00000e+00 ]
#    [0.00000e+00 2.76220e+00 ]]]]
print(T.get_block().reshape(4,4))
# [[4.76220e+00 0.00000e+00 0.00000e+00 3.62686e+00 ]
#  [0.00000e+00 3.62686e+00 3.62686e+00 0.00000e+00 ]
#  [0.00000e+00 3.62686e+00 3.62686e+00 0.00000e+00 ]
#  [3.62686e+00 0.00000e+00 0.00000e+00 2.76220e+00 ]]

# two different trace have the same result due to symmetry
trT = T.clone().Trace_("x_i","x_o").Trace_("y_i","y_o").set_name("trT")
trT.print_diagram()
trT = trT[0].item()
print("(TRG) trT={}".format(trT))

trT = T.clone().Trace_("x_i","y_i").Trace_("x_o","y_o").set_name("trT")
trT.print_diagram()
trT = trT[0].item()
print("(TRG) trT={}".format(trT))

# tensor Name : T_arrow
# tensor Rank : 4
# block_form  : False
# is_diag     : False
# on device   : cytnx device: CPU
# braket_form : True
#          row           col
#             -----------
#             |         |
#    y_i  -->| 2     2 |-->  x_o
#             |         |
#    x_i  -->| 2     2 |-->  y_o
#             |         |
#             -----------
print("(TRG) Constructing T_arrow")
bd_i = cytnx.Bond(2, cytnx.BD_IN)
bd_o = cytnx.Bond(2, cytnx.BD_OUT)
T_arrow = cytnx.UniTensor([bd_i,bd_i,bd_o,bd_o], rowrank=2).set_name("T_arrow").relabel(["y_i","x_i","x_o","y_o"])
T_arrow.print_diagram()
for y_i in range(2):
    for x_i in range(2):
        for x_o in range(2):
            for y_o in range(2):
                T_arrow[y_i,x_i,x_o,y_o] = M[0,y_i]*M[0,x_i]*M[0,x_o]*M[0,y_o] + M[1,y_i]*M[1,x_i]*M[1,x_o]*M[1,y_o]

print(T_arrow)
print(T_arrow.get_block().reshape(4,4))

# this one works
trT = T_arrow.clone().Trace_("x_i","x_o").Trace_("y_i","y_o").set_name("trT")
trT.print_diagram()
trT = trT[0].item()
print("(TRG) trT={}".format(trT))
# this one should fail du to the direction of the bond
try:
    trT = T_arrow.clone().Trace_("x_i","y_i").Trace_("x_o","y_o").set_name("trT")
    trT.print_diagram()
    trT = trT[0].item()
    print("(TRG) trT={}".format(trT))
except:
    print("(TRG) Fail!")

# For a block
# AB
# CD 
# init: 
# ··········🄲·🄳··············🄲·🄳·············🄲·🄳··············🄲·🄳············
# ··········🄰·🄱··············🄰·🄱·············🄰·🄱··············🄰·🄱············
# ·········╱·····╲···········╱·····╲·········╱·····╲············╱·····╲···········
# ·······🄰·······🄱········🄰·······🄱·······🄰·······🄱·······🄰·······🄱··········
# ╲·····╱···········╲·····╱··········╲·····╱···········╲·····╱···········╲········
# ·🄱·🄰··············🄱·🄰··············🄱···············🄱·🄰·············🄱·🄰····
# ·🄳·🄲··············🄳·🄲··············🄳···············🄳·🄲·············🄳·🄲····
# ╱·····╲···········╱·····╲···········╱·····╲··········╱·····╲···········╱·····╲··
# ·······🄲·······🄳········🄲·······🄳·······🄲·······🄳·······🄲·······🄳··········
# ·········╲·····╱···········╲·····╱···········╲·····╱··········╲·····╱···········
# ··········🄲·🄳··············🄲·🄳·············🄲·🄳·············🄲·🄳·············
# ··········🄰·🄱··············🄰·🄱·············🄰·🄱·············🄰·🄱·············





# SVD
print("(TRG) SVD")
# ·······y_i·················y_i·································y_i··············
# ········│···················│···································│···············
# ········▼···················▼···································▼···············
# ······┌─┴─┐···············┌─┴─┐·······························┌─┴─┐·············
# x_i·─▶┤ T ├▶─·x_o·=·x_i·─▶┤UL │·······························│UR ├▶─·x_o·······
# ······└─┬─┘···············└───◢·······························◥───┘·············
# ········▼······················╲·····························╱··················
# ········│·····················UL_o·························UR_i··················
# ·······y_o····················DR_i·························DL_o··················
# ·································╲·························╱····················
# ··································◢───┐···············┌───◥·····················
# ··································│DR ├─▶─·x_o·=·x_i─▶┤DL·│·····················
# ··································└─┬─┘···············└─┬─┘·····················
# ····································▼···················▼·······················
# ····································│···················│·······················
# ···································y_o·················y_o······················
# T-->UL @ DR
print("(TRG) T-->UL @ DR")
T.print_diagram()
S , U , Vdag = cytnx.linalg.Svd(T)
S_sqrt = cytnx.linalg.Pow(S,0.5).set_name("S_sqrt")
UL = cytnx.Contract(U, S_sqrt).set_name("UL").relabel(["y_i","x_i","UL_o"])
DR = cytnx.Contract(S_sqrt, Vdag).set_name("DR").relabel(["DR_i","x_o","y_o"])

def T_to_UL_DR(T):
    S , U , Vdag = cytnx.linalg.Svd(T)
    S_sqrt = cytnx.linalg.Pow(S,0.5).set_name("S_sqrt")
    S_sqrt.print_diagram()
    UL = cytnx.Contract(U, S_sqrt).set_name("UL").relabel(["y_i","x_i","UL_o"])
    DR = cytnx.Contract(S_sqrt, Vdag).set_name("DR").relabel(["DR_i","x_o","y_o"])
    return UL, DR

T_UL, T_DR = T_to_UL_DR(T)
print((T_UL-UL).Norm())
print((T_DR-DR).Norm())

# T-->DL @ UR
print("(TRG) T-->DL @ UR")
T.permute(["x_i","y_o","y_i","x_o"]).print_diagram()
S , U , Vdag = cytnx.linalg.Svd(T.permute(["x_i","y_o","y_i","x_o"]))
S_sqrt = cytnx.linalg.Pow(S,0.5).set_name("S_sqrt")
DL = cytnx.Contract(U, S_sqrt).set_name("DL").relabel(["x_i","y_o","DL_o"])
UR = cytnx.Contract(S_sqrt, Vdag).set_name("UR").relabel(["UR_i","y_i","x_o"])

def T_to_DL_UR(T):
    T.permute(["x_i","y_o","y_i","x_o"]).print_diagram()
    S , U , Vdag = cytnx.linalg.Svd(T.permute(["x_i","y_o","y_i","x_o"]))
    S_sqrt = cytnx.linalg.Pow(S,0.5).set_name("S_sqrt")
    DL = cytnx.Contract(U, S_sqrt).set_name("DL").relabel(["x_i","y_o","DL_o"])
    UR = cytnx.Contract(S_sqrt, Vdag).set_name("UR").relabel(["UR_i","y_i","x_o"])
    return DL, UR
    

T_DL, T_UR = T_to_DL_UR(T)
print((T_DL-DL).Norm())
print((T_UR-UR).Norm())



# ·······y_i···············y_i····················································
# ········│·················│·····················································
# ········▼·················▼·····················································
# ······┌─┴─┐·············┌─┴─┐···················································
# x_i·─▶┤ T ├▶─·x_o─x_i·─▶┤ T ├▶─·x_o·············································
# ······└─┬─┘·············└─┬─┘···················································
# ········▼·················▼·····················································
# ········│·················│·····················································
# ·······y_o···············y_o····················································
# ········│·················│·····················································
# ·······y_i···············y_i····················································
# ········│·················│·····················································
# ········▼·················▼·····················································
# ······┌─┴─┐·············┌─┴─┐···················································
# x_i·─▶┤ T ├▶─·x_o─x_i·─▶┤ T ├▶─·x_o·············································
# ······└─┬─┘·············└─┬─┘···················································
# ········▼·················▼·····················································
# ········│·················│·····················································
# ·······y_o···············y_o····················································

# ·······y_i································y_i···································
# ········│··································│····································
# ········▼··································▼····································
# ······┌─┴─┐······························┌─┴─┐··································
# x_i·─▶┤UL │······························│UR ├▶·─x_o····························
# ······└───◢······························◥───┘··································
# ···········╲····························╱·······································
# ··········UL_o························UR_i······································
# ··········DR_i························DL_o······································
# ·············╲························╱·········································
# ··············◢───┐··············┌───◥··········································
# ··············│DR ├─▶─·x_o─x_i·─▶┤DL │··········································
# ··············└─┬─┘··············└─┬─┘··········································
# ················▼··················▼············································
# ···············y_o················y_o···········································
# ···············y_i················y_i···········································
# ················▼··················▼············································
# ··············┌─┴─┐··············┌─┴─┐··········································
# ··············│UR ├─▶─·x_o─x_i·─▶┤UL │··········································
# ··············◥───┘········ ·····└───◢··········································
# ·············╱························╲·········································
# ···········UR_i······················UL_o·······································
# ···········DL_o······················DR_i·······································
# ···········╱···························╲········································
# ······┌───◥······························◢───┐··································
# x_i·─▶┤DL │······························│DR ├▶─·x_o····························
# ······└─┬─┘······························└─┬─┘··································
# ········▼··································▼····································
# ········│··································│····································
# ·······y_o································y_o···································


# net = cytnx.Network()
# net.FromString(["DR: DR_i, xoxi_u, yoyi_l", \
#                 "DL: DL_o, xoxi_u, yoyi_r", \
#                 "UR: UR_i, xoxi_d, yoyi_l", \
#                 "UL: UL_o, xoxi_d, yoyi_r", \
#                 "TOUT: DR_i, UR_i, DL_o, UL_o"])
# print(net)
# # net.PutUniTensor("DR", DR)
# net.PutUniTensor("DR", DR, ["DR_i","x_o","y_o"])
# net.PutUniTensor("DL", DL, ["DL_o","x_i","y_o"])
# net.PutUniTensor("UR", UR, ["UR_i","x_o","y_i"])
# net.PutUniTensor("UL", UL, ["UL_o","x_i","y_i"])
# print(net)
# Tout1 = net.Launch()
# Tout1.print_diagram()

# net = cytnx.Network()
# net.FromString(["DR: DR_i, DR_xo-DL_xi, DR_yo-UR_yi", \
#                 "DL: DL_o, DR_xo-DL_xi, DL_yo-UL_yi", \
#                 "UR: UR_i, UR_xo-UL_xi, DR_yo-UR_yi", \
#                 "UL: UL_o, UR_xo-UL_xi, DL_yo-UL_yi", \
#                 "TOUT: DR_i, UR_i, DL_o, UL_o"])
# print(net)
# # net.PutUniTensor("DR", DR)
# net.PutUniTensor("DR", DR, ["DR_i","x_o","y_o"])
# net.PutUniTensor("DL", DL, ["DL_o","x_i","y_o"])
# net.PutUniTensor("UR", UR, ["UR_i","x_o","y_i"])
# net.PutUniTensor("UL", UL, ["UL_o","x_i","y_i"])
# print(net)
# Tout2 = net.Launch()
# Tout2.print_diagram()

# diff = Tout1-Tout2
# print(diff.Norm())
# print(type(diff))

# Main
# if __name__ == "__main__":
#     print("(TRG) TRG, 2D Ising model")
